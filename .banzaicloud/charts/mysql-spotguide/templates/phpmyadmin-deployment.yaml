{{- if .Values.phpmyadmin.enabled -}}
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ include "mysql-spotguide.fullname" . }}-phpmyadmin
  labels:
    app.kubernetes.io/name: {{ include "mysql-spotguide.name" . }}
    helm.sh/chart: {{ include "mysql-spotguide.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "mysql-spotguide.name" . }}
      helm.sh/chart: {{ include "mysql-spotguide.chart" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/managed-by: {{ .Release.Service }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "mysql-spotguide.name" . }}
        helm.sh/chart: {{ include "mysql-spotguide.chart" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
    spec:
      containers:
        - name: phpmyadmin
          image: {{ .Values.phpmyadmin.image.repository }}:{{ .Values.phpmyadmin.image.tag }}
          imagePullPolicy: {{ .Values.phpmyadmin.image.pullPolicy }}
          env:
            - name: PMA_CONTROLUSER
              valueFrom:
                secretKeyRef:
                  name: {{ default (printf "%s-phpmyadmin" (include "mysql-spotguide.fullname" .)) .Values.phpmyadmin.existingSecret }}
                  key: username
            - name: PMA_CONTROLPASS
              valueFrom:
                secretKeyRef:
                  name: {{ default (printf "%s-phpmyadmin" (include "mysql-spotguide.fullname" .)) .Values.phpmyadmin.existingSecret }}
                  key: password
            - name: PMA_CONTROLHOST
              value: {{ printf "%s-mysql-master" (include "mysql-spotguide.clustername" . ) }}
            - name: PMA_PMADB
              value: "pma"
            - name: PMA_HOST
              value: {{ printf "%s-mysql-master" (include "mysql-spotguide.clustername" . ) }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
{{- end }}
